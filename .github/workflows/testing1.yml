name: AI Test Generation and Execution
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  generate-and-run-tests:
    runs-on: ubuntu-latest
    environment: dev
    name: AI Test Generation Job
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai requests pytest pytest-cov coverage
    - name: Create test generator script
      run: |
        cat > test-generator.py << 'ENDOFFILE'
        import os
        import openai
        import requests
        
        def generate_test_cases(code_content, file_path):
            client = openai.AzureOpenAI(
                api_key=os.environ["AZURE_OPENAI_API_KEY"],
                azure_deployment="gpt4o",
                api_version="2024-08-01-preview",
                azure_endpoint=os.environ["AZURE_OPENAI_ENDPOINT"]
            )
            
            prompt = f"""Generate comprehensive test cases for the following code. 
                The output should be valid Python pytest code. 
                Include edge cases and exception handling.
                Code file path: {file_path}
                Code content:
                {code_content}
                
                Return only the Python test code without any explanations or markdown formatting."""
                
            response = client.chat.completions.create(
                model="gpt4o",
                messages=[
                    {"role": "system", "content": "You are a Python expert specializing in code quality and test case generation. Your reviews are constructive, specific, and educational."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=2500
            )
            return response.choices[0].message.content
        
        def strip_markdown(code):
            # Remove markdown code block delimiters
            lines = code.splitlines()
            if lines[0].strip().startswith("```python"):
                lines = lines[1:]
            if lines[-1].strip() == "```":
                lines = lines[:-1]
            return "\n".join(lines)
        
        def main():
            test_dir = "tests"
            os.makedirs(test_dir, exist_ok=True)
            
            # Process all Python files in the project
            for root, dirs, files in os.walk("."):
                if "venv" in dirs:
                    dirs.remove("venv")
                if test_dir in dirs:
                    dirs.remove(test_dir)
                
                for file in files:
                    if file.endswith(".py") and not file.startswith("test_"):
                        file_path = os.path.join(root, file)
                        with open(file_path, "r") as f:
                            code_content = f.read()
                        
                        test_code = generate_test_cases(code_content, file_path)
                        test_code = strip_markdown(test_code)  # Remove markdown formatting
                        test_file = os.path.join(test_dir, f"test_{file}")
                        
                        with open(test_file, "w") as f:
                            f.write(f"# Auto-generated tests for {file_path}\n\n")
                            f.write(test_code)
                        print(f"Generated tests for {file_path}")
                        
        if __name__ == "__main__":
            main()
        ENDOFFILE
    - name: Run test generator
      env:
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        python test-generator.py
    - name: Run Tests with Coverage
      run: |
        coverage run -m pytest tests/ -v
        coverage html
        coverage report
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
